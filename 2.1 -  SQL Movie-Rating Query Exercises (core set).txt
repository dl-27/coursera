SQL Movie-Rating Query Exercises (core set)

You've started a new movie-rating website, and you've been collecting data on reviewers' ratings of various movies. There's not much data yet, but you can still try out some interesting queries. Here's the schema: 

Movie ( mID, title, year, director )
English: There is a movie with ID number mID, a title, a release year, and a director.

Reviewer ( rID, name )
English: The reviewer with ID number rID has a certain name.

Rating ( rID, mID, stars, ratingDate )
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 

Your queries will run over a small data set conforming to the schema



Question 1
Find the titles of all movies directed by Steven Spielberg. 
Note: Your queries are executed using SQLite, so you must conform to the SQL constructs supported by SQLite.

select m.title 
from Movie m
where m.director='Steven Spielberg'


Question 2
Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.

select distinct m.year
from movie m, rating r
where r.mID=m.mID and (stars in ('4', '5')) order by m.year asc


Question 3
Find the titles of all movies that have no ratings. 

select distinct m.title 
from movie m, rating r
where m.mID not in (select r.mID from rating r)


Question 4
Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date. 

select rev.name
from reviewer rev, rating r
where r.ratingDate is NULL and rev.rID=r.rID


Question 5
Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, first by reviewer name, then by movie title, and lastly by number of stars. 

select rev.name, m.title, r.stars, r.ratingDate
from movie m join rating r on m.mID=r.mID
    join reviewer rev on rev.rID=r.rID
order by rev.name, m.title, r.stars


Question 6
For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie. 

select distinct rev.name, m.title 
from movie m join rating r on m.mID=r.mID
    join reviewer rev on rev.rID=r.rID
            inner join rating r2 on (r2.stars>r.stars and r2.ratingDate>r.ratingDate and r.mID=r2.mID and r2.rID=r.rID)


Question 7
For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title. 

select m.title, max(r.stars)
from movie m, rating r
where m.mID in (select r.mID from rating r) and m.mID=r.mID
group by m.title order by m.title


Question 8
For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title. 

select m.title, max(r.stars)-min(r.stars) as dif
from movie m, rating r
where m.mID=r.mID
group by m.title order by dif desc


Question 9
Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980.) 

select max(a1)-min(a1) from
(select avg(av1)a1 from
    (select avg(stars) av1 from rating r, movie m where r.mid=m.mid and m.year < 1980 group by r.mid)
union select avg(av2)a1 from 
    (select avg(stars) av2 from rating r, movie m where r.mid=m.mid and m.year > 1980 group by r.mid))
