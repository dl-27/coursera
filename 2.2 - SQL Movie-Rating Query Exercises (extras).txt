SQL Movie-Rating Query Exercises (extras)

You've started a new movie-rating website, and you've been collecting data on reviewers' ratings of various movies. There's not much data yet, but you can still try out some interesting queries. Here's the schema: 

Movie ( mID, title, year, director )
English: There is a movie with ID number mID, a title, a release year, and a director.

Reviewer ( rID, name )
English: The reviewer with ID number rID has a certain name.

Rating ( rID, mID, stars, ratingDate )
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 

Your queries will run over a small data set conforming to the schema.


Question 1
Find the names of all reviewers who rated Gone with the Wind. 

select distinct rev.name
from reviewer rev, rating r, movie m
where rev.rID=r.rID and m.mID=r.mID and m.title='Gone with the Wind'


Question 2
For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. 

select distinct rev.name, m.title, r.stars
from reviewer rev, rating r, movie m
where m.director=rev.name and r.mID=m.mID and rev.rID=r.rID


Question 3
Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

select rev.name
from reviewer rev union 
select m.title 
from movie m


Question 4
Find the titles of all movies not reviewed by Chris Jackson. 

select m.title m1
from movie m
where m1 not in 
    (select m.title from movie m, rating r, reviewer rev
     where rev.rID=r.rID and r.mID=m.mID and rev.name='Chris Jackson')


Question 5
For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order.

select distinct (select name 
                 from reviewer 
                 where rid = r1.rid) as n1, 
                 (select name 
                  from reviewer 
                  where rid = r2.rid)
from rating r1 join rating r2 using (mid)
where r1.rid <> r2.rid and (select name 
                            from reviewer 
                            where r1.rid = rid) < (select name 
                                                   from reviewer 
                                                   where rid = r2.rid)
order by n1


Question 6
For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.

select name, title, stars
from movie join reviewer join rating using (mid, rid)
where stars in 
         (select min(stars)  from rating)


Question 7
List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. 

select m.title, avg (r.stars) a
from movie m inner join rating r on m.mID=r.mID
group by m.title order by a desc, m.title asc


Question 8
Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 

select rev.name
from reviewer rev inner join rating r on r.rID=rev.rID
group by r.rID
having count(*)>2


Question 9
Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) 

select m.title, m. director from movie m 
where m.director in (select m.director from movie m
                                    group by m.director
                                    having count(m.director)>1)
order by m.director, m.title


Question 10
Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) 

select m.title, avg(r.stars) max1 
from rating r join movie m on m.mid = r.mid group by r.mid
having max1 = (select max(s.stars) stars from (select mid, avg(stars) stars 
                                                                           from rating group by mid) as s)


Question 11
Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) 

select m.title, avg(r.stars) min1 
from rating r join movie m on m.mid = r.mid group by r.mid
having min1 = (select min(s.stars) stars from (select mid, avg(stars) stars 
                                                                           from rating group by mid) as s)


Question 12
For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. 

select m.director, m.title, max(r.stars)
from movie m inner join rating r on r.mID=m.mID
where m.director is not null
group by m.director